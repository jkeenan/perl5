=encoding=utf8

=head1 NAME

perlmaketargets - A guide to Perl's F<make> targets

=head1 DESCRIPTION

This document provides an introduction to the F<make> targets you are most
likely to use when building F<perl>.

This document should be considered as I<tips> for your work on the core
distribution.  It is not intended to tie the hands of Perl's maintainers (Perl
5 Porters) as to how F<perl> might be built in the future.  This document
aspires to convey words of wisdom -- not authoritative pronouncements.

We begin with the most common F<make> targets you will invoke on the command
line as you hack on F<perl>.  We will then move to other targets which you
will either use less frequently or that you will use for more fine-grained
concerns.  Within each of these two broad groups we will present targets in
more of a logical order than alphabetically.

=head2 Programming Environment

The tips and examples which follow presume you are in a Unix-like programming
environment.  They presume that you can execute both shell and Perl programs a
the command line, that you have F<make> installed as well as a C-compiler such
as F<gcc>, F<g++> or F<clang>.

We welcome patches which extend this discussion to Windows, VMS and other
programming environments.

You can hack on F<perl> either in a F<git> checkout from our repository or in
a directory tree created by unpacking a tarball released by Perl 5 Porters
(whether that be a monthly development release, an annual production release
or a maintenance release).  While all the F<make> targets discussed here can
be used in either environment, some may be less useful in F<git> checkouts
because F<git> commands do a better job.

In what follows we assume that you are in the I<top-level directory> of either
a F<git> checkout or an unpacked tarball of the core distribution.

=head2 Configuration

F<make> targets are specified in a Makefile, but in Perl, like most other
significant software projects, a Makefile is not something which is hard-coded
but which is generated dynamically by another program -- in this case the
shell script F<Configure>.  How to use F<Configure> is described in the
F<INSTALL> document which you can read with C<perldoc INSTALL>.  For the
purpose of this document, we'll assume that you can configure simply with:

    $ sh ./Configure -des -Dusedevel

Executing F<Configure> will create a number of files in your top-level
directory such as these:

    ./.config/README
    ./.config/instruct
    ./Makefile
    ./Policy.sh
    ./bitcount.h
    ./cflags
    ./config.h
    ./config.sh
    ./generate_uudmap
    ./generate_uudmap.o
    ./makedepend
    ./makefile
    ./makefile.old
    ./mg_data.h
    ./myconfig
    ./pod/Makefile
    ./runtests
    ./uudmap.h

We won't provide a detailed description of these files in this document but
will provide specifics where needed.

=head1 COMMON F<make> TARGETS

=head2 F<make>

Calling F<make> by itself builds the F<perl> executable, compiles all
libraries and utilities that will be installed with that executable and moves
all files into their pre-installation position.

Synonym:  F<make all>

=head2 F<make test_prep>

F<make test_prep> does only one thing above and beyond what F<make> does.
F<make test_prep> creates a symlink in the F<t/> subdirectory to the newly
generated F<perl> in the top-level directory.

Much of the core distribution test suite is written on the assumption that the
tester is starting from the F<t/> directory.  Having that symlink enables the
tester to issue commands like this:

    cd t; ./perl harness op/*.t; cd -

or:

    cd t; ./perl harness ../cpan/File-Temp/t/*.t; cd -

=head2 F<make test>

F<make test> runs the F<perl> executable created by F<make> over each file in
the test suite.  The execution is serial; no tests are run in parallel.

You can run F<make test> over selected files or directories by populating the
C<TEST_FILES> environmental variable with a path relative to the F<t/>
subdirectory.  Example:

    TEST_FILES="../ext/Pod-Html/t/*.t" make test

Upon completion, F<make test> will print a short summary to STDOUT.  Example:

    All tests successful.
    Elapsed: 1097 sec
    u=7.88  s=2.69  cu=693.26  cs=63.70  scripts=2553  tests=1199015

Synonym:  F<make check>

(Currently, F<make test> is implemented by running a shell script, F<runtests>,
which is automatically generated during F<Configure> from a template in source
file F<runtests.SH>.  F<runtests>, in turn, is mostly implemented by running
the program F<t/TEST>.  However, this implementation may change in the future
and you should not rely upon its details.)

=head2 F<make test_harness>

F<make test_harness> runs the F<perl> executable created by F<make> over each file in
the test suite.  The tests can be run in parallel by setting an appropriate
value for environmental variable C<$TEST_JOBS> and invoking F<make> with the
F<-j> switch.  For example:

    TEST_JOBS=4 make -j${TEST_JOBS} test_harness

Upon completion, F<make test_harness> will print a short summary to STDOUT.
Example (slightly horizontally compressed):

    All tests successful.

    Test Summary Report
    -------------------
    ../dist/Net-Ping/t/010_pingecho.t           (Wstat: 0 Tests: 2 Failed: 0)
      TODO passed:   2
    ../dist/Net-Ping/t/450_service.t            (Wstat: 0 Tests: 26 Failed: 0)
      TODO passed:   9, 18
    Files=2679, Tests=1199037, 248 wallclock secs
        (84.45 usr 14.90 sys + 694.27 cusr 70.06 csys = 863.68 CPU)
    Result: PASS

Synonym:  F<make test-harness>

=head2 F<make install>

TK

=head1 OTHER F<make> TARGETS

=head2 F<make miniperl>

F<make miniperl> calls your C compiler on what are currently 40 F<*.c> source
code files to build one binary executable, F<miniperl>, and one Perl program,
F<lib/buildcustomize.pl>.

F<miniperl> is then used in the balance of F<make> to execute Perl programs
which compile the libraries and utilities which ship with F<perl> and which
autogenerate documentation from templates.  Unlike the full F<perl>
executable, F<miniperl> cannot dynamically load modules.  Hence, programs
invoked by F<miniperl> can include C<require> and C<use> statements provided
there is no XS code involved.  F<miniperl> is invoked more than 150
times during F<make> and thus is the major way in which F<perl>'s build is
bootstrapped.

Generally speaking, you should consider running F<make miniperl> and
subsequently F<make minitest> if you are making changes to any of the
following F<*.c> source code files:

    av.c         gv.c              numeric.c    pp_hot.c     scope.c
    caretx.c     hv.c              op.c         pp_pack.c    sv.c
    deb.c        keywords.c        pad.c        pp_sort.c    taint.c
    doio.c       locale.c          perl.c       pp_sys.c     time64.c
    doop.c       mathoms.c         perlio.c     reentr.c     toke.c
    dquote.c     mg.c              perly.c      regcomp.c    universal.c
    dump.c       miniperlmain.c    pp.c         regexec.c    utf8.c
    globals.c    mro_core.c        pp_ctl.c     run.c        util.c

F<lib/buildcustomize.pl> is also used in the balance of F<make> to identify
the paths to source code of the Perl libraries which are needed in that
compilation.

=head2 F<make minitest_prep>

As its name suggests, F<make minitest_prep> uses the F<miniperl> executable to
prepare a set of tests that do not require the full F<perl> executable to run.

Roughly speaking, it traverses the F<cpan/>, F<dist/>, F<ext/> and F<lib/>
directories, creates per-module Makefiles as needed, runs F<make> with those
Makefiles, and creates other files as needed.

For example, in the F<cpan/Archive-Tar/> directory, F<make minitest_prep>
creates these files:

    ./cpan/Archive-Tar/Makefile
    ./cpan/Archive-Tar/Makefile.PL
    ./cpan/Archive-Tar/blib/bin/.exists
    ./cpan/Archive-Tar/blib/man1/.exists
    ./cpan/Archive-Tar/blib/man3/.exists
    ./cpan/Archive-Tar/blib/script/.exists
    ./cpan/Archive-Tar/pm_to_blib

Currently this target creates a total of 1328 files.

Of these, 15 are F<Makefile.PL> files, 25 are F<Makefile> files, 136 are
F<*.exist> files and 99 are F<pm_to_blib> files.

Many of the remaining files  are F<.pm> files found under F<cpan/>, F<dist/>,
and F<ext/> which are copied into pre-installation position under F<lib/>.

Among the other types of files generated are:

=over 4

=item *

2 shell scripts, F<./realclean.sh> and F<./veryclean.sh>, which will
be subsequently used in two other F<make> targets.

=item *

39 POD files:

    ./lib/CPAN/API/HOWTO.pod
    ./lib/CPAN/Meta/History/Meta_1_0.pod
    ./lib/CPAN/Meta/History/Meta_1_1.pod
    ./lib/CPAN/Meta/History/Meta_1_2.pod
    ./lib/CPAN/Meta/History/Meta_1_3.pod
    ./lib/CPAN/Meta/History/Meta_1_4.pod
    ./lib/Config.pod
    ./lib/ExtUtils/MakeMaker/FAQ.pod
    ./lib/ExtUtils/MakeMaker/Tutorial.pod
    ./lib/ExtUtils/ParseXS.pod
    ./lib/IO/Compress/FAQ.pod
    ./lib/Locale/Maketext.pod
    ./lib/Locale/Maketext/Cookbook.pod
    ./lib/Locale/Maketext/TPJ13.pod
    ./lib/Module/CoreList.pod
    ./lib/Net/libnetFAQ.pod
    ./lib/Pod/Simple.pod
    ./lib/Pod/Simple/Subclassing.pod
    ./lib/TAP/Harness/Beyond.pod
    ./lib/Test/Tutorial.pod
    ./lib/Test2/Transition.pod
    ./lib/perldoc.pod
    ./lib/perlfaq.pod
    ./lib/perlfaq1.pod
    ./lib/perlfaq2.pod
    ./lib/perlfaq3.pod
    ./lib/perlfaq4.pod
    ./lib/perlfaq5.pod
    ./lib/perlfaq6.pod
    ./lib/perlfaq7.pod
    ./lib/perlfaq8.pod
    ./lib/perlfaq9.pod
    ./lib/perlglossary.pod
    ./lib/perlxs.pod
    ./lib/perlxstut.pod
    ./lib/perlxstypemap.pod
    ./lib/version.pod
    ./lib/version/Internals.pod
    ./pod/perluniprops.pod

=item *

7 generated executable files awaiting installation:

    ./cpan/IO-Compress/blib/script/streamzip
    ./cpan/IO-Compress/blib/script/zipdetails
    ./cpan/Pod-Checker/blib/script/podchecker
    ./cpan/Pod-Usage/blib/script/pod2usage
    ./cpan/podlators/blib/script/pod2man
    ./cpan/podlators/blib/script/pod2text
    ./dist/Module-CoreList/blib/script/corelist

=item *

2 F<man> files awaiting installation:

    ./cpan/podlators/blib/man1/pod2man.1
    ./cpan/podlators/blib/man1/pod2text.1

=item *

1 header file:

    ./git_version.h

=item *

541 F<unicore/*.pl> files such as:

    ./lib/unicore/CombiningClass.pl
    ./lib/unicore/Decomposition.pl
    ./lib/unicore/Name.pl

=item *

1 other F<unicore>-related file:

    ./lib/unicore/mktables.lst

=back

You will rarely need to invoke F<make minitest_prep> directly.  You will
generally run F<make minitest> immediately after (or in place of) F<make
miniperl>, but it interesting how much work has to be done to create
meaningful tests.

=head2 F<make minitest>

F<make minitest> runs a test harness using the F<miniperl> executable to run
over 400 test files in these directories:

    t/base
    t/comp
    t/run
    t/cmd
    t/io
    t/re
    t/opbasic
    t/op
    t/uni
    t/perf

Approximately 80 such files are skipped because they presume functionality not
yet built in F<miniperl>.

No new files are created between F<make minitest_prep> and F<make minitest>.

=head2 F<make clean>

The various F<make *clean> targets are primarily useful if you are building
F<perl> from a source tarball rather than a F<git> checkout.  If you are
working in a F<git> checkout, you will almost always use F<git checkout -dfx>.

F<make clean> does not delete F<config.sh> or F<Policy.sh>.  Note that since
F<make clean> removes all Makefiles, you cannot call any F<make> commands
thereafter.

Synonym: F<make realclean>

=head2 F<make distclean>

Above and beyond the files which F<make clean> removes, F<make distclean>
removes F<config.sh>, F<Policy.sh>, F<t/test_state> and files created as part
of cross-compilation.

=head2 F<make veryclean>

F<make veryclean> removes all other files above and beyond those which F<make
distclean> removes.

=cut
