=encoding=utf8

=head1 NAME

perlmaketargets - A guide to Perl's F<make> targets

=head1 DESCRIPTION

This document provides an introduction to the F<make> targets you are most
likely to use when building F<perl>.

This document should be considered as I<tips> for your work on the core
distribution.  It is not intended to tie the hands of Perl's maintainers (Perl
5 Porters) as to how F<perl> might be built in the future.  Words of wisdom --
not authoritative pronouncements.

We begin with the most common F<make> targets you will invoke on the command
line as you hack on F<perl>.  We will then move to other targets which you
will either use less frequently or that you will use for more fine-grained
concerns.  Within each of these two broad groups we will present targets in
more of a logical order than alphabetically.

=head2 Programming Environment

The tips and examples which follow presume you are in a Unix-like programming
environment.  They presume that you can execute both shell and Perl programs a
the command line, that you have F<make> installed as well as a C-compiler such
as F<gcc>, F<g++> or F<clang>.

We welcome patches which extend this discussion to Windows, VMS and other
programming environments.

You can hack on F<perl> either in a F<git> checkout from our repository or in
a directory tree created by unpacking a tarball released by Perl 5 Porters
(whether that be a monthly development release, an annual production release
or a maintenance release).  While all the F<make> targets discussed here can
be used in either environment, some may be less useful in F<git> checkouts
because F<git> commands do a better job.

=head2 Configuration

F<make> targets are specified in a Makefile, but in Perl, like most other
significant software projects, a Makefile is not something which is hard-coded
but which is generated dynamically by another program -- in this case the
shell script F<Configure>.  How to use F<Configure> is described in the
F<INSTALL> document which you can read with C<perldoc INSTALL>.  For the
purpose of this document, we'll assume that you can configure simply with:

    $ sh ./Configure -des -Dusedevel

Executing F<Configure> will create a number of files in your top-level
directory such as these:

    ./.config/README
    ./.config/instruct
    ./Makefile
    ./Policy.sh
    ./bitcount.h
    ./cflags
    ./config.h
    ./config.sh
    ./generate_uudmap
    ./generate_uudmap.o
    ./makedepend
    ./makefile
    ./makefile.old
    ./mg_data.h
    ./myconfig
    ./pod/Makefile
    ./runtests
    ./uudmap.h

We won't provide a detailed description of these files in this document but
will provide specifics where needed.

=head1 COMMON F<make> TARGETS

=head2 F<make>

TK

=head2 F<make test_prep>

TK

=head2 F<make test>

TK

=head2 F<make test_harness>

TK

=head2 F<make install>

TK

=head1 OTHER F<make> TARGETS

=head2 F<make miniperl>

F<make miniperl> creates object files (F<*.o>) and two executables,
F<lib/buildcustomize.pl> and F<miniperl>.

TK: Purpose of F<miniperl>.

TK: Purpose of F<lib/buildcustomize.pl>.

The object files created by F<make miniperl> currently
(C<v5.35.0-158-g04f8aa6391> June 18 2021) are 40 in number:

    ./av.o
    ./caretx.o
    ./deb.o
    ./doio.o
    ./doop.o
    ./dquote.o
    ./dump.o
    ./globals.o
    ./gv.o
    ./hv.o
    ./keywords.o
    ./locale.o
    ./mathoms.o
    ./mg.o
    ./miniperlmain.o
    ./mro_core.o
    ./numeric.o
    ./opmini.o
    ./pad.o
    ./perlio.o
    ./perlmini.o
    ./perly.o
    ./pp.o
    ./pp_ctl.o
    ./pp_hot.o
    ./pp_pack.o
    ./pp_sort.o
    ./pp_sys.o
    ./reentr.o
    ./regcomp.o
    ./regexec.o
    ./run.o
    ./scope.o
    ./sv.o
    ./taint.o
    ./time64.o
    ./toke.o
    ./universal.o
    ./utf8.o
    ./util.o

=head2 F<make minitest_prep>

As its name suggests, F<make minitest_prep> uses the F<miniperl> executable to
prepare a set of tests that do not require the full F<perl> executable to run.

Roughly speaking, it traverses the F<cpan/>, F<dist/>, F<ext/> and F<lib/>
directories, creates per-module Makefiles as needed, runs F<make> with those
Makefiles, and creates other files as needed.

For example, in the F<cpan/Archive-Tar/> directory, F<make minitest_prep>
creates these files:

    ./cpan/Archive-Tar/Makefile
    ./cpan/Archive-Tar/Makefile.PL
    ./cpan/Archive-Tar/blib/bin/.exists
    ./cpan/Archive-Tar/blib/man1/.exists
    ./cpan/Archive-Tar/blib/man3/.exists
    ./cpan/Archive-Tar/blib/script/.exists
    ./cpan/Archive-Tar/pm_to_blib

Currently this target creates a total of 1328 files.

Of these, 15 are F<Makefile.PL> files, 25 are F<Makefile> files, 136 are
F<*.exist> files and 99 are F<pm_to_blib> files.

Many of the remaining files  are F<.pm> files found under F<cpan/>, F<dist/>,
and F<ext/> which are copied into pre-installation position under F<lib/>.

Among the other types of files generated are:

=over 4

=item *

2 shell scripts, F<./realclean.sh> and F<./veryclean.sh>, which will
be subsequently used in two other F<make> targets.

=item *

39 POD files:

    ./lib/CPAN/API/HOWTO.pod
    ./lib/CPAN/Meta/History/Meta_1_0.pod
    ./lib/CPAN/Meta/History/Meta_1_1.pod
    ./lib/CPAN/Meta/History/Meta_1_2.pod
    ./lib/CPAN/Meta/History/Meta_1_3.pod
    ./lib/CPAN/Meta/History/Meta_1_4.pod
    ./lib/Config.pod
    ./lib/ExtUtils/MakeMaker/FAQ.pod
    ./lib/ExtUtils/MakeMaker/Tutorial.pod
    ./lib/ExtUtils/ParseXS.pod
    ./lib/IO/Compress/FAQ.pod
    ./lib/Locale/Maketext.pod
    ./lib/Locale/Maketext/Cookbook.pod
    ./lib/Locale/Maketext/TPJ13.pod
    ./lib/Module/CoreList.pod
    ./lib/Net/libnetFAQ.pod
    ./lib/Pod/Simple.pod
    ./lib/Pod/Simple/Subclassing.pod
    ./lib/TAP/Harness/Beyond.pod
    ./lib/Test/Tutorial.pod
    ./lib/Test2/Transition.pod
    ./lib/perldoc.pod
    ./lib/perlfaq.pod
    ./lib/perlfaq1.pod
    ./lib/perlfaq2.pod
    ./lib/perlfaq3.pod
    ./lib/perlfaq4.pod
    ./lib/perlfaq5.pod
    ./lib/perlfaq6.pod
    ./lib/perlfaq7.pod
    ./lib/perlfaq8.pod
    ./lib/perlfaq9.pod
    ./lib/perlglossary.pod
    ./lib/perlxs.pod
    ./lib/perlxstut.pod
    ./lib/perlxstypemap.pod
    ./lib/version.pod
    ./lib/version/Internals.pod
    ./pod/perluniprops.pod

=item *

7 generated executable files awaiting installation:

    ./cpan/IO-Compress/blib/script/streamzip
    ./cpan/IO-Compress/blib/script/zipdetails
    ./cpan/Pod-Checker/blib/script/podchecker
    ./cpan/Pod-Usage/blib/script/pod2usage
    ./cpan/podlators/blib/script/pod2man
    ./cpan/podlators/blib/script/pod2text
    ./dist/Module-CoreList/blib/script/corelist

=item *

2 F<man> files awaiting installation:

    ./cpan/podlators/blib/man1/pod2man.1
    ./cpan/podlators/blib/man1/pod2text.1

=item *

1 header file:

    ./git_version.h

=item *

541 F<unicore/*.pl> files such as:

    ./lib/unicore/CombiningClass.pl
    ./lib/unicore/Decomposition.pl
    ./lib/unicore/Name.pl

=item *

1 other F<unicore>-related file:

    ./lib/unicore/mktables.lst

=back

=head2 F<make minitest>

Runs a test harness using the F<miniperl> executable to run over 400 test
files in these directories:

    t/base
    t/comp
    t/run
    t/cmd
    t/io
    t/re
    t/opbasic
    t/op
    t/uni
    t/perf

Approximately 80 such files are skipped because they presume functionality not
yet built in F<miniperl>.

No new files are created between F<make minitest_prep> and F<make minitest>.

=head2 F<make clean>

TK

=head2 F<make realclean>

TK

=head2 F<make veryclean>

TK

=cut
